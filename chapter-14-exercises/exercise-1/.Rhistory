# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
library(httr)
library(jsonlite)
library(dplyr)
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
library(httr)
library(jsonlite)
library(dplyr)
# Create a variable base_uri that stores the base URI (as a string) for the
# Github API (https://api.github.com)
base_uri <- "https://api.github.com"
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
install.packages("httr")
install.packages("httr")
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
library(httr)
install.packages("jsonlite")
library(jsonlite)
# Under the "Repositories" category of the API documentation, find the endpoint
# that will list _repos in an organization_. Then create a variable named
# `org_resource` that stores the endpoint for the `programming-for-data-science`
# organization repos (this is the _path_ to the resource of interest).
endpoint <- "/repos/organization"
org_resource <- paste0(base_uri, endpoint)
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
GET(org_resource, query = query_params)
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
response <- GET(org_resource, query = query_params)
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
GET(org_resource)
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
respond <- GET(org_resource)
# Extract the content of the response using the `content()` function, saving it
# in a variable.
content(respond)
# Extract the content of the response using the `content()` function, saving it
# in a variable.
response_text <- content(respond, type = "text")
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
respond <- GET(org_resource)
# Extract the content of the response using the `content()` function, saving it
# in a variable.
response_text <- content(response, type = "text")
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
response <- GET(org_resource)
# Extract the content of the response using the `content()` function, saving it
# in a variable.
response_text <- content(response, type = "text")
# Under the "Repositories" category of the API documentation, find the endpoint
# that will list _repos in an organization_. Then create a variable named
# `org_resource` that stores the endpoint for the `programming-for-data-science`
# organization repos (this is the _path_ to the resource of interest).
endpoint <- "/repos/organization"
org_resource <- paste0(base_uri, endpoint)
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
response <- GET(org_resource)
# Extract the content of the response using the `content()` function, saving it
# in a variable.
response_text <- content(response, type = "text")
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
response <- GET(org_resource,  query = query_params)
print(respond)
# Extract the content of the response using the `content()` function, saving it
# in a variable.
response_text <- content(response, type = "text")
# Convert the content variable from a JSON string into a data frame.
items <- response$items
# How many (public) repositories does the organization have?
length(response_text)
# How many (public) repositories does the organization have?
n(response_text)
# How many (public) repositories does the organization have?
length(org_resource)
# What are the full names of the top 5 repos in the search results?
str(response_data)
