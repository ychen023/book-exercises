# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- x + 3
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(x)
return (add_three + 3)
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- paste(add_three(7))
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(x)
return (sum(add_three, 3)
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- paste(add_three(7))
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(x)
return (sum(add_three, 3))
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- paste(add_three(7))
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(x)
value <- add_three + 3
return (value)
calculate_ratio <- function(x, y) {
ratio <- x / y
return(ratio)
}
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(x)
value <- add_three + 3
return (value)
calculate_ratio <- function(x, y) {
ratio <- x / y
return(ratio)
}
print (calculate_ratio(60, 12))
intro <- function(YEAR, MAJOR) {
greet <- paste("Hello I am a", {YEAR}, "year, and my major is", {MAJOR})
return(greet)
}
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(x){
value <- add_three + 3
return (value)
}
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(x){
value <- add_three + 3
return (value)
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- paste(add_three(7))
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(x){
value <- sum(add_three, 3)
return (value)
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- paste(add_three(7))
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(x){
return (value)
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- paste(add_three(7))
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(x){
return (value)
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- paste(add_three(7))
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(x){
return (value)
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- paste(add_three(7))
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- paste(add_three(7))
print ten
print (ten)
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(x){
value <- x +3
return (value)
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- paste(add_three(7))
print (ten)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
height_in_feet <- paste(feet, inches)
height_calculation <- height_in_feet * 0.3048
return(height_calculation)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(6, 2)
print(height_in_meters)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
height_in_feet <- paste(feet, inches)
height_calculation <- cast(height_in_feet * 0.3048)
return(height_calculation)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(6, 2)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
height_in_feet <- paste(feet, inches)
height_calculation <- cast(height_in_feet * 0.3048)
return(height_calculation)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(6, 2)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
height_in_feet <- paste(feet, inches)
height_calculation <- as.Date(height_in_feet) * 0.3048
return(height_calculation)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(6, 2)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
height_in_feet <- paste(feet, inches)
height_calculation <- as.Date(height_in_feet) * 0.3048
return(height_calculation)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(6, 2)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
height_calculation <- sum(feet*0.3038, inches*0.0254)
return(height_calculation)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(6, 2)
print(height_in_meters)
height_calculation <- sum(feet*0.3038, inches*0.0254)
return(height_calculation)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
height_calculation <- sum(feet*0.3038, inches*0.0254)
return(height_calculation)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(6, 3)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
height_calculation <- sum(feet*0.3038, inches*0.0254)
return(height_calculation)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(6, 3)
print(height_in_meters)
